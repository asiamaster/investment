<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dili.uap.dao.RoleMapper">
    <resultMap id="BaseResultMap" type="com.dili.uap.domain.Role">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="role_name" jdbcType="VARCHAR" property="roleName"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="firm_id" jdbcType="BIGINT" property="firmCode"/>
        <result column="created" jdbcType="TIMESTAMP" property="created"/>
        <result column="modified" jdbcType="TIMESTAMP" property="modified"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
        -->
        id, role_name, description, firm_id, created, modified
    </sql>
    <select id="selectBy" parameterType="java.lang.Long" resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
        -->
        select
        <include refid="Base_Column_List"/>
        from role
        where id = #{id,jdbcType=BIGINT}
    </select>
    <update id="updateBy" parameterType="com.dili.uap.domain.Role">
        <!--
          WARNING - @mbg.generated
        -->
        update role
        <set>
            <if test="roleName != null">
                role_name = #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="firmCode != null">
                firm_id = #{firmCode,jdbcType=BIGINT},
            </if>
            <if test="created != null">
                created = #{created,jdbcType=TIMESTAMP},
            </if>
            <if test="modified != null">
                modified = #{modified,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <!-- 根据角色ID查询该角色下是否存在有用户 -->
    <select id="countUserByRoleId" resultType="long" parameterType="long">
       select COUNT(id) from user_role ur where ur.role_id=#{value}
    </select>

    <!-- 根据角色ID删除角色-菜单 信息 -->
    <delete id="deleteRoleMenuByRoleId" parameterType="long">
      delete from role_menu  where role_id=#{value}
    </delete>

    <!-- 根据角色ID删除角色-资源 信息 -->
    <delete id="deleteRoleResourceByRoleId" parameterType="long">
      delete from role_resource where role_id=#{value}
    </delete>

    <!-- 查询所有的菜单及资源信息 -->
    <select id="getRoleMenuAndResource" resultType="com.dili.uap.domain.dto.SystemResourceDto">
          (SELECT m.id AS treeId,m.parent_id AS parentId,
            m.system_id AS systemId,m.`name`,m.description,1 AS menu,m.type
          FROM menu m order by m.order_number asc)
        UNION ALL
          SELECT
              r.id AS treeId,r.menu_id AS parentId,NULL AS systemId,r.`name`,r.description,0 AS menu,'3' as type
          FROM resource r
    </select>

    <!-- 根据角色ID查询对应的菜单及资源信息 -->
    <select id="getRoleMenuAndResourceByRoleId" parameterType="long" resultType="com.dili.uap.domain.dto.SystemResourceDto">
          SELECT
              rm.menu_id AS treeId,1 AS menu
          FROM
              role_menu rm where role_id=#{value}
          UNION ALL
          SELECT
                rr.resource_id AS treeId,
                0 AS menu
          FROM
                role_resource rr where role_id=#{value}
    </select>

    <!-- 根据用户获取用户所属角色信息 -->
    <select id="listByUserId" parameterType="java.lang.Long" resultMap="BaseResultMap">
          select r.* from user_role ur LEFT JOIN role r on ur.role_id=r.id where ur.user_id = #{userId}
    </select>

</mapper>